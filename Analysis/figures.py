import os

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
from matplotlib.collections import PatchCollection
from scipy.io import loadmat

from agent_dynamics import AgentDynamics
from classify import DataClassifier, f_exp, get_scale_factor_analytical

RED, BLUE = 0, 1

plt.rcParams.update(
    {
        'font.size': 28,
    }
)

# Colors
C_RED = (178/255, 24/255, 43/255)
C_BLUE = (33/255, 102/255, 172/255)

C_RED_DARK = (103/255, 0/255, 31/255)
C_BLUE_DARK = (5/255, 48/255, 97/255)

rootdir = 'path to root file with MAT files'
cachedir = 'path to cache files generated by DataClassifier'
summaryfile = '/Users/nabeel/Data/output/classification_metrics_expkernel.npz'

# Figure 4 (Scatterplots)

def plot_scatterplots(nr, deltav, density):
    scale_factor = get_scale_factor_analytical(nr=nr, deltav=deltav, density=density)
    dc = DataClassifier(rootdir=rootdir, cachedir=cachedir, nr=nr, density=density, deltav=deltav, f=f_exp)
    dc.scatterplot(scale_factor=scale_factor, color1=C_BLUE, color2=C_RED)

# Figures 1 and 5 (Trends)

# Nr vs misclassifications
def plot_nr_vs_misclassifications(density, deltav, both=True):
    fig, ax = plt.subplots(figsize=(8, 6.5))

    data = np.load(summaryfile)
    nrs, deltavs, densities = data['nrs'], data['deltavs'], data['densities']
    nrs = [nr/42 for nr in nrs]
    jdeltav = np.argwhere(deltavs == deltav)
    kdensity = np.argwhere(densities == density)

    baseline_cms = data['baseline_cms'] / (1001 * 100)
    field_cms = data['field_cms_analytical'] / (1001 * 100)

    ax.plot(nrs, baseline_cms[:, jdeltav, kdensity, RED, BLUE].squeeze(), 'o-', color=C_RED, label='C-I (Smaller Group)',
        linewidth=3, markersize=10)
    ax.plot(nrs, baseline_cms[:, jdeltav, kdensity, BLUE, RED].squeeze(), 'o-', color=C_BLUE, label='C-I (Larger Group)',
        linewidth=3, markersize=10, markerfacecolor='w', markeredgewidth=2)

    if both:
        ax.plot(nrs, field_cms[:, jdeltav, kdensity, RED, BLUE].squeeze(), 's-', color=C_RED_DARK, label='C-II (Smaller Group)',
            linewidth=3, markersize=10)
        ax.plot(nrs, field_cms[:, jdeltav, kdensity, BLUE, RED].squeeze(), 's-', color=C_BLUE_DARK, label='C-II (Larger Group)',
            linewidth=3, markersize=10, markerfacecolor='w', markeredgewidth=2)
    ax.set(xlabel='$N_r$', ylabel='Misclassifications')
    
    plt.tight_layout()
    plt.show()

# Deltav vs misclassifications
def plot_deltav_vs_misclassifications(nr, density, both=True):
    fig, ax = plt.subplots(figsize=(8, 6.5))

    data = np.load(summaryfile)
    nrs, deltavs, densities = data['nrs'], data['deltavs'], data['densities']

    inr = np.argwhere(nrs == nr)
    kdensity = np.argwhere(densities == density)

    baseline_cms = data['baseline_cms'] / (1001 * 100)
    field_cms = data['field_cms_analytical'] / (1001 * 100)

    ax.plot(deltavs, baseline_cms[inr, :, kdensity, RED, BLUE].squeeze(), 'o-', color=C_RED, label='C-I (Smaller Group)',
        linewidth=3, markersize=10)

    if both:
        ax.plot(deltavs, field_cms[inr, :, kdensity, RED, BLUE].squeeze(), 's-', color=C_RED_DARK, label='C-II (Smaller Group)',
            linewidth=3, markersize=10)

    if nr != 21:
        ax.plot(deltavs, baseline_cms[inr, :, kdensity, BLUE, RED].squeeze(), 'o-', color=C_BLUE, label='C-I (Larger Group)',
            linewidth=3, markersize=10, markerfacecolor='w', markeredgewidth=2)

    if nr != 21 and both:
        ax.plot(deltavs, field_cms[inr, :, kdensity, BLUE, RED].squeeze(), 's-', color=C_BLUE_DARK, label='C-II (Larger Group)',
            linewidth=3, markersize=10, markerfacecolor='w', markeredgewidth=2)
    
    ax.set(xlabel='$s_0$', ylabel='Misclassifications')

    plt.tight_layout()
    plt.show()

# Density vs misclassifications
def plot_density_vs_misclassifications(nr, deltav, both=True):
    fig, ax = plt.subplots(figsize=(8, 6.5))

    data = np.load(summaryfile)
    nrs, deltavs, densities = data['nrs'], data['deltavs'], data['densities']

    inr = np.argwhere(nrs == nr)
    jdeltav = np.argwhere(deltavs == deltav)

    baseline_cms = data['baseline_cms'] / (1001 * 100)
    field_cms = data['field_cms_analytical'] / (1001 * 100)

    ax.plot(densities, baseline_cms[inr, jdeltav, :, RED, BLUE].squeeze(), 'o-', color=C_RED, label='C-I (Smaller Group)',
        linewidth=3, markersize=10)

    if both:
        ax.plot(densities, field_cms[inr, jdeltav, :, RED, BLUE].squeeze(), 's-', color=C_RED_DARK, label='C-II (Smaller Group)',
            linewidth=3, markersize=10)
    
    if nr != 21:
        ax.plot(densities, baseline_cms[inr, jdeltav, :, BLUE, RED].squeeze(), 'o-', color=C_BLUE, label='C-I (Larger Group)',
            linewidth=3, markersize=10, markerfacecolor='w', markeredgewidth=2)

    if nr != 21 and both:
        ax.plot(densities, field_cms[inr, jdeltav, :, BLUE, RED].squeeze(), 's-', color=C_BLUE_DARK, label='C-II (Larger Group)',
            linewidth=3, markersize=10, markerfacecolor='w', markeredgewidth=2)

    ax.set(xlabel='$\\rho$', ylabel='Misclassifications')

    plt.tight_layout()
    plt.show()

def show_agent_snapshot(nr, density, deltav):
    realization = np.random.randint(1, 101)
    t = np.random.randint(100, 1001)
    filename = f'ObservingAndInferring_29April2019_' \
                f'N42_NumberRatio_{nr}_packdens_{density}_delV_{deltav}_Fluc_0_Realization_{realization}.mat'
    filename = os.path.join(rootdir, filename)
    ad = AgentDynamics(filename)

    face_colors = np.zeros((ad.n, 3))
    edge_colors = np.zeros((ad.n, 3))

    face_colors[ad.labels, :] = C_BLUE
    face_colors[~ad.labels, :] = C_RED
    
    edge_colors[ad.labels, :] = C_BLUE_DARK
    edge_colors[~ad.labels, :] = C_RED_DARK

    fig = plt.figure(figsize=(7, 7))
    ax = fig.add_axes([0, 0, 1, 1], frameon=False)
    ax.set(xlim=ad.xbounds, ylim=ad.ybounds)

    agents = [Circle(xy=(ad.pos[i, 0, t], ad.pos[i, 1, t]), radius=ad.agent_radius) for i in range(ad.n)]
    p = PatchCollection(agents)
    p.set_edgecolor(edge_colors)
    p.set_facecolor(face_colors)
    p.set_linewidth(6)
    ax.add_collection(p)

    plt.show()

# Figure 2
def plot_mixture_velocity(filename):

    m = loadmat(filename)
    Nr_all, N = m['Nr_all'].squeeze(), m['N'].squeeze()
    v_avg_pos, v_avg_neg = m['v_avg_pos'].squeeze(), m['v_avg_neg'].squeeze()
    delv_all = m['delv_all'].squeeze()

    fig, ax = plt.subplots(figsize=(8, 6.5))
    ax.plot(Nr_all / N, (N - 2 * Nr_all) / N * delv_all[0], ':', label='Mixture Velocity',
        color=(.4, .4, .4), linewidth=3, markersize=10)
    ax.plot(Nr_all / N, v_avg_pos, 'o-', color=C_BLUE, markerfacecolor='w', 
        linewidth=3, markersize=10, markeredgewidth=2, label='v\\_avg\\_pos')
    ax.plot(Nr_all / N, v_avg_neg, 'o-', color=C_RED,  linewidth=3, markersize=10, label='v\\_avg\\_neg')
    

    ax.set(xlim=(0, 0.5), xlabel='$N_r$', ylabel='Drift velocity')
    # ax.legend()

    plt.tight_layout()
    plt.show()

def plot_cluster_index(filename):
    m = loadmat(filename)
    Nr_all, N = m['Nr_all'].squeeze(), m['N'].squeeze()
    no_indep_small, no_indep_big = m['no_indep_small'].squeeze(), m['no_indep_big'].squeeze()

    fig, ax = plt.subplots(figsize=(8, 6.5))
    ax.plot(Nr_all / N, no_indep_small[:100, :, :].mean(axis=(0, 2)), 'o-', label='Smaller Group (Initial)',
        color=C_RED,
        linewidth=3, markersize=10, markeredgewidth=2,
    )
    ax.plot(Nr_all / N, no_indep_big[:100, :, :].mean(axis=(0, 2)), 'o-', label='Larger Group (Initial)',
        color=C_BLUE, markerfacecolor='w',
        linewidth=3, markersize=10, markeredgewidth=2,
    )
    ax.plot(Nr_all / N, no_indep_small[-100:, :, :].mean(axis=(0, 2)), 's-', label='Smaller Group (Final)',
        color=C_RED_DARK,
        linewidth=3, markersize=10, markeredgewidth=2,
    )
    ax.plot(Nr_all / N, no_indep_big[-100:, :, :].mean(axis=(0, 2)), 's-', label='Larger Group (Final)',
        color=C_BLUE_DARK, markerfacecolor='w',
        linewidth=3, markersize=10, markeredgewidth=2,
    )

    ax.set(xlabel='$N_r$', ylabel='Clusters')
    
    plt.tight_layout()
    plt.show()


# ----------------------------------------------------------------- 

# Figure 2    
plot_nr_vs_misclassifications(density=0.57706, deltav=0.75, both=False)

# Figure 3
plot_deltav_vs_misclassifications(nr=14, density=0.45792, both=False)
plot_deltav_vs_misclassifications(nr=21, density=0.45792, both=False)

# Figure 5
plot_scatterplots(nr=21, deltav=3, density=0.30847) # Basic
plot_scatterplots(nr=7, deltav=3, density=0.30847)  # Lower Nr
plot_scatterplots(nr=21, deltav=3, density=0.22182)  # Lower Density
plot_scatterplots(nr=21, deltav=0.1, density=0.30847)  # Lower deltav

# Figure 6
plot_nr_vs_misclassifications(density=0.57706, deltav=0.75, both=True)
plot_deltav_vs_misclassifications(nr=14, density=0.45792, both=True)
plot_density_vs_misclassifications(nr=14, deltav=0.75, both=True)

show_agent_snapshot(nr=2, density=0.57706, deltav=2)
